{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"demo1 cookie session": {
		"prefix": "demo1 cookie session",
		"body": [
			"",
			"//#region auth",
			"import session from 'cookie-session'",
			"import type { UserInfo } from 'remult'",
			"",
			"app.use(",
			"  '/api',",
			"  session({ secret: process.env['SESSION_SECRET'] || 'my secret' })",
			")",
			"",
			"export const validUsers: UserInfo[] = [",
			"  { id: '1', name: 'Jane' },",
			"  { id: '2', name: 'Steve' },",
			"]",
			"app.post('/api/signIn', express.json({ type: 'text' }), (req, res) => {",
			"  const user = validUsers.find((user) => user.name === req.body.username)",
			"  if (user) {",
			"    req.session!['user'] = user",
			"    res.json(user)",
			"  } else {",
			"    res.status(404).json(\"Invalid user, try 'Steve' or 'Jane'\")",
			"  }",
			"})",
			"",
			"app.post('/api/signOut', (req, res) => {",
			"  req.session!['user'] = null",
			"  res.json('signed out')",
			"})",
			"",
			"app.get('/api/currentUser', (req, res) => {",
			"  res.json(req.session!['user'])",
			"})",
			"//#endregion",
			""
		],
		"description": ""
	},
	// "demo6 harden heroku": {
	// 	"prefix": "demo5 harden heroku",
	// 	"body": [
	// 		"import compression from 'compression'",
	// 		"import helmet from 'helmet'",
	// 		"import sslRedirect from 'heroku-ssl-redirect'",
	// 		"app.use(sslRedirect())",
	// 		"app.use(helmet({ contentSecurityPolicy: false }))",
	// 		"app.use(compression())"
	// 	],
	// 	"description": "demo6 harden heroku"
	// },
	"demo7 serve static files": {
		"prefix": "demo2 serve static files",
		"body": [
			"if (!process.env['VITE']) {",
			"  const frontendFiles = process.cwd() + '/dist'",
			"  app.use(express.static(frontendFiles))",
			"  app.get('/*', (_, res) => {",
			"    res.sendFile(frontendFiles + '/index.html')",
			"  })",
			"  app.listen(process.env['PORT'] || 3002, () => console.log('Server started'))",
			"}",
			""
		],
		"description": "demo7 serve static files"
	},
	// "demo7 serve static files": {
	// 	"prefix": "demo6 serve static files",
	// 	"body": [
	// 		"if (process.env['NODE_ENV'] === 'production') {",
	// 		"  const frontendFiles = process.cwd() + '/dist'",
	// 		"  app.use(express.static(frontendFiles))",
	// 		"  app.get('/*', (_, res) => {",
	// 		"    res.send(frontendFiles + '/index.html')",
	// 		"  })",
	// 		"  app.listen(process.env['PORT'] || 3002, () => console.log('Server started'))",
	// 		"}",
	// 		"else "
	// 	],
	// 	"description": "demo7 serve static files"
	// },
	// "demo6 serve static files angular": {
	// 	"prefix": "demo6 serve static files angular",
	// 	"body": [
	// 		"const frontendFiles = process.cwd() + '/dist/angular-todo'",
	// 		"app.use(express.static(frontendFiles))",
	// 		"app.get('/*', (_, res) => {",
	// 		"  res.sendFile(frontendFiles + '/index.html')",
	// 		"})",
	// 		"",
	// 		"app.listen(process.env['PORT'] || 3002, () => console.log('Server started'))"
	// 	],
	// 	"description": "demo angular serve"
	// },
	"if prod": {
		"prefix": "if prod",
		"body": [
			"if (process.env['NODE_ENV'] === 'production')"
		],
		"description": "demo7 serve static files"
	},
	"csPostgres": {
		"prefix": "csPostgres",
		"body": [
			"postgres://postgres:MASTERKEY@localhost/postgres"
		]
	},
	"vite server": {
		"prefix": "vite server",
		"body": [
			"import('vite').then(async ({ createServer }) => {",
			"  const viteDevServer = await createServer({",
			"    server: {",
			"      middlewareMode: true",
			"    }",
			"  })",
			"  app.use(viteDevServer.middlewares)",
			"  ",
			"})"
		]
	},
	// "csMongo": {
	// 	"prefix": "csMongo",
	// 	"body": [
	// 		"mongodb://localhost:27017/local"
	// 	]
	// },
	"tryAlert": {
		"prefix": "try alert",
		"body": [
			" try {",
			"   $TM_SELECTED_TEXT$1",
			" } catch (error: any) {",
			"   alert(error.message)",
			" }"
		],
		"description": ""
	},
	"prod": {
		"prefix": "prod",
		"body": [
			"process.env['NODE_ENV'] === 'production'"
		]
	},
	"open-api": {
		"prefix": "demo3 open-api",
		"body": [
			"import swaggerUi from 'swagger-ui-express'",
			"",
			"const openApiDocument = api.openApiDoc({ title: 'remult-react-todo' })",
			"app.get('/api/openApi.json', (req, res) => res.json(openApiDocument))",
			"app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(openApiDocument))",
			""
		]
	},
	"yoga": {
		"prefix": "demo4 graphql",
		"body": [
			"import { remultGraphql } from 'remult/graphql'",
			"import { createYoga, createSchema } from 'graphql-yoga'",
			"",
			"const { typeDefs, resolvers } = remultGraphql({",
			"  entities: [Task],",
			"})",
			"app.use('/api/graphql', [",
			"  api.withRemult,",
			"  createYoga({",
			"    graphiql: true,",
			"    schema: createSchema({",
			"      typeDefs,",
			"      resolvers,",
			"    }),",
			"  })]",
			")",
			""
		]
	}
	// ,
	// "graphql": {
	// 	"prefix": "demo4 graphql",
	// 	"body": [
	// 		"import { buildSchema } from 'graphql'",
	// 		"import { graphqlHTTP } from 'express-graphql'",
	// 		"import { remultGraphql } from 'remult/graphql'",
	// 		"",
	// 		"const { schema, rootValue } = remultGraphql(api)",
	// 		"app.use(",
	// 		"  '/api/graphql',",
	// 		"  graphqlHTTP({",
	// 		"    schema: buildSchema(schema),",
	// 		"    rootValue,",
	// 		"    graphiql: true,",
	// 		"  })",
	// 		")",
	// 		""
	// 	]
	// }
}